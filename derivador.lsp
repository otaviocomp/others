(defun DERIV (F)
(cond
	((eq F nil) nil)
	((listp f) (deriv-list f))
	(T (DERIV-ATOM F))
)
)
(defun DERIV-ATOM (F)
(cond
	((eq F 'X) 1)
	(T 0)
)
)

(defun DERIV-LIST (F) 
(cond 
	((eq (FIRST F) '+) (DERIV-SOMA (REST F)))
	((eq (FIRST F) '-) (DERIV-MENOS (REST F)))
	((eq (FIRST F) '*) (DERIV-VEZES (REST F)))
	((eq (FIRST F) 'SIN) (DERIV-SIN (REST F)))
	((eq (FIRST F) 'COS) (DERIV-COS (REST F)))
	((eq (FIRST F) 'EXP) (DERIV-EXP (REST F)))
	((eq (FIRST F) '/) (DERIV-QUO (REST F)))
	((eq (FIRST F) 'LN) (DERIV-LN (REST F)))
	((eq (FIRST F) 'TAN) (DERIV-TAN (REST F)))
	((eq (FIRST F) 'SEC) (DERIV-SEC (REST F)))
	((eq (FIRST F) 'CSC) (DERIV-CSC (REST F)))
)
)
(defun DERIV-MENOS(F)
(COND
	((EQ (SECOND F) NIL) (LIST '- (LIST (DERIV (FIRST F)))))
	(T (LIST '-(LIST (DERIV (FIRST F)) (DERIV (SECOND F)))))
)
)
	
(defun DERIV-VEZES (F)
	(LIST '+ (LIST '* (DERIV (FIRST F)) (SECOND F))
	(LIST '*(FIRST F) (DERIV ( SECOND F)))
	)
	)
(defun DERIV-SOMA (F)
(LIST '+(LIST (DERIV (FIRST F)) (DERIV (SECOND F))))
)
(defun DERIV-SIN (F)
(LIST '*  (DERIV (FIRST F)) 'COS(FIRST F))

)
(defun DERIV-COS (F)
(LIST '* (DERIV (FIRST F)) '-SIN(FIRST F))
)
(defun DERIV-EXP (F)
(LIST '*(LIST (DERIV (FIRST F)) 'EXP(FIRST F)))
)
(defun DERIV-QUO (F)
( LIST '/ (LIST '- (LIST '* (LIST (SECOND F) (DERIV (FIRST F)))) (LIST '*(LIST (FIRST F) (DERIV (SECOND F)))))
(LIST '* (LIST (SECOND F) (SECOND F))))
)
(defun DERIV-LN (F)
(LIST '/ (LIST (DERIV (FIRST F)) (FIRST F)))
)
(defun DERIV-TAN (F)
(LIST '* (LIST(DERIV (FIRST F))) (LIST '*(LIST 'SEC(FIRST F)) (LIST 'SEC(FIRST F))))
)
(defun DERIV-SEC (F)
(LIST '* (LIST (DERIV (FIRST F))) (LIST '*(LIST 'TAN(FIRST F) 'SEC(FIRST F))))
)
(defun DERIV-CSC (F)
(LIST '* (LIST (DERIV (FIRST F))) (LIST '*(LIST 'TAN(FIRST F) 'SEC(FIRST F))))
) 
(defun SIMP (F)
(COND
((eq F nil) nil)
((listp F) (SIMP-LIST F))
(T F)
)
)
(defun SIMP-LIST(F)
(COND
	((eq (FIRST F) '+) (SIMP-SOMA(REST F)))
	((eq (FIRST F) '-) (SIMP-MENOS(REST F)))
	((eq (FIRST F) '*) (SIMP-PRODUTO(REST F)))
	((eq (FIRST F) '/) (SIMP-DIV(REST F)))
	((eq (FIRST F) 'SIN) (SIMP-SIN(REST F)))
	((eq (FIRST F) 'COS) 'COS(SIMP(REST F)))
	((eq (FIRST F) 'EXP) 'EXP(SIMP(REST F)))
	((eq (FIRST F) 'LN) 'LN(SIMP(REST F)))
	(T '(SYNTAX-ERROR))
)
)
(defun SIMP-SOMA (F)
(COND
	((eq (LIST-LENGTH F) 2)
		(COND
			((EQ (SIMP (FIRST F)) 0) (SIMP(SECOND F)))
			((EQ (SIMP (SECOND F)) 0) (SIMP(FIRST F)))
			(T  (LIST '+ (SIMP(FIRST F)) (SIMP(SECOND F))))
		)
	)
	(T '(SYNTAX-ERROR))
)	
)
(defun SIMP-MENOS (F)
(COND
	((eq (LIST-LENGTH F) 2)
		(COND
			((EQ (SIMP (FIRST F)) 0) (LIST'- (SIMP(SECOND F))))
			((EQ (SIMP (SECOND F)) 0) (SIMP(FIRST F)))
			(T (LIST'- (SIMP(FIRST F)) (SIMP(SECOND F))))
		)
	)	
	(T '(SYNTAX-ERROR))
)
)
(defun SIMP-PRODUTO (F)
(COND
	((eq (LIST-LENGTH F) 2)
		(COND
			((eq (SIMP (FIRST F)) 0) 0)
			((eq (SIMP (SECOND F)) 0) 0)
			((eq (SIMP (FIRST F)) 1) (SIMP(SECOND F)))
			((eq (SIMP (SECOND F)) 1) (SIMP(FIRST F)))
			(T (LIST '*(SIMP (FIRST F)) (SIMP(SECOND F))))
		)
	)
	(T '(SYNTAX-ERROR))
	)
)
(defun SIMP-DIV (F)
(COND
	((eq (LIST-LENGTH F) 2)
		(COND
			((eq (SIMP (FIRST F)) (SIMP(SECOND F))) 1)
			((eq (SIMP (FIRST F)) 0) 0)
			((eq (SIMP (SECOND F)) 1) (SIMP(FIRST F)))
			((eq (SIMP (SECOND F)) 0) '(ERROR))
			(T (LIST '/(SIMP (FIRST F)) (SIMP(SECOND F))))
		)
	)
	(T '(SYNTAX-ERROR))
	)
)
(defun SIMP-SIN(F)
		(COND
			((eq (SIMP (F)) 0) 0)
			((eq  (FIRST F) '* ) (list 'SIN(SIMP-PRODUTO(F))))
			((eq  (FIRST F) '/ ) (list 'SIN(SIMP-DIV(F))))
			((eq  (FIRST F) '+ ) (list 'SIN(SIMP-SOMA(F))))
			((eq  (FIRST F) '- ) (list 'SIN(SIMP-MENOS(F))))
			(T (LIST 'SIN(F) ))
		)
		
)
	
			